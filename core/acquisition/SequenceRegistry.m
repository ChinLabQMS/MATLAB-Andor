classdef SequenceRegistry < BaseObject
    % SequenceRegistry: Registry of acquisition sequences.

    properties (Constant)
        Empty = table( ...
            (1:10)', ...
            categorical({'--inactive--', '--inactive--', '--inactive--', '--inactive--', '--inactive--', '--inactive--', '--inactive--', '--inactive--', '--inactive--', '--inactive--'}, ...
            {'Andor19330', 'Andor19331', 'Zelux', '--inactive--'}, 'Ordinal', true)', ...
            ["", "", "", "", "", "", "", "", "", ""]', ...
            categorical({'Analysis', 'Analysis', 'Analysis', 'Analysis', 'Analysis', 'Analysis', 'Analysis', 'Analysis', 'Analysis', 'Analysis'}, ...
            {'Start+Acquire', 'Start', 'Acquire', 'Analysis'}, 'Ordinal', true)', ...
            ["", "", "", "", "", "", "", "", "", ""]', ...
            'VariableNames', {'Order', 'Camera', 'Label', 'Type', 'Note'})
        ZeluxBasic = table( ...
            (1:6)', ...
            categorical({'Zelux', 'Zelux', 'Zelux', 'Zelux', '--inactive--', '--inactive--'}, ...
            {'Andor19330', 'Andor19331', 'Zelux', '--inactive--'}, 'Ordinal', true)', ...
            ["Lattice", "DMD", "Lattice", "DMD", "", ""]', ...
             categorical({'Start+Acquire', 'Start+Acquire', 'Analysis', 'Analysis', 'Analysis', 'Analysis'}, ...
            {'Start+Acquire', 'Start', 'Acquire', 'Analysis'}, 'Ordinal', true)', ...
            ["", "", "", "", "", ""]', ...
            'VariableNames', {'Order', 'Camera', 'Label', 'Type', 'Note'})
        AndorBasic = table( ...
            (1:8)', ...
            categorical({'Andor19330', 'Andor19331', 'Andor19330', 'Andor19331', 'Andor19330', 'Andor19331', '--inactive--', '--inactive--'}, ...
            {'Andor19330', 'Andor19331', 'Zelux', '--inactive--'}, 'Ordinal', true)', ...
            ["Image", "Image", "Image", "Image", "Image", "Image", "", ""]', ...
             categorical({'Start', 'Start', 'Acquire', 'Acquire', 'Analysis', 'Analysis', 'Analysis', 'Analysis'}, ...
            {'Start+Acquire', 'Start', 'Acquire', 'Analysis'}, 'Ordinal', true)', ...
            ["", "", "", "", "", "", "", ""]', ...
            'VariableNames', {'Order', 'Camera', 'Label', 'Type', 'Note'})
        Full4Basic = table( ...
            (1:12)', ...
            categorical({'Zelux', 'Zelux', 'Zelux', 'Zelux', 'Andor19330', 'Andor19331', 'Andor19330', 'Andor19331', 'Andor19330', 'Andor19331', '--inactive--', '--inactive--'}, ...
            {'Andor19330', 'Andor19331', 'Zelux', '--inactive--'}, 'Ordinal', true)', ...
            ["Lattice", "DMD", "Lattice", "DMD", "Image", "Image", "Image", "Image", "Image", "Image", "", ""]', ...
            categorical({'Start+Acquire', 'Start+Acquire', 'Analysis', 'Analysis', 'Start', 'Start', 'Acquire', 'Acquire', 'Analysis', 'Analysis', 'Analysis', 'Analysis'}, ...
            {'Start+Acquire', 'Start', 'Acquire', 'Analysis'}, 'Ordinal', true)', ...
            ["", "", "", "", "", "", "", "", "FitCenter", "FitCenter", "", ""]', ...
            'VariableNames', {'Order', 'Camera', 'Label', 'Type', 'Note'})
        Full4Analysis = table( ...
            (1:12)', ...
            categorical({'Zelux', 'Zelux',  'Zelux', 'Zelux', 'Andor19330', 'Andor19331', 'Andor19330', 'Andor19331', 'Andor19330', 'Andor19331', '--inactive--', '--inactive--'}, ...
            {'Andor19330', 'Andor19331', 'Zelux', '--inactive--'}, 'Ordinal', true)', ...
            ["Lattice", "DMD", "Lattice", "DMD", "Image", "Image", "Image", "Image", "Image", "Image", "", ""]', ...
            categorical({'Start+Acquire', 'Start+Acquire', 'Analysis', 'Analysis', 'Start', 'Start', 'Acquire', 'Acquire', 'Analysis', 'Analysis', 'Analysis', 'Analysis'}, ...
            {'Start+Acquire', 'Start', 'Acquire', 'Analysis'}, 'Ordinal', true)', ...
            ["", "", "CalibLatR", "FitCenter", "", "", "", "", "FitCenter, CalibLatR", "FitCenter, CalibLatR", "", ""]', ...
            'VariableNames', {'Order', 'Camera', 'Label', 'Type', 'Note'})
    end

    methods (Static)
        function list = getSequenceList()
            list = SequenceRegistry().getPropList();
        end

        function mustBeValidSequence(sequence_table)
            arguments
                sequence_table (:, 5) table
            end
            active_cameras = unique(sequence_table.Camera);
            active_cameras = string(active_cameras(active_cameras ~= "--inactive--"))';
            if isempty(active_cameras)
                error("Invalid sequence, no active camera.")
            end
            for camera = active_cameras
                camera_seq = sequence_table(sequence_table.Camera == camera, :);
                started = false;
                acquired = string.empty;
                analyzed = string.empty;
                for i = 1:height(camera_seq)
                    label = string(camera_seq.Label(i));
                    type = string(camera_seq.Type(i));
                    if type == "Start" || type == "Start+Acquire"
                        if started
                            error("Invalid sequence, multiple start commands before acquire for camera %s.", camera)
                        end
                        started = true;
                    end
                    if type == "Acquire" || type == "Start+Acquire"
                        if ~started
                            error("Invalid sequence, acquire command before start command for camera %s.", camera)
                        end
                        if any(acquired == label)
                            error("Invalid sequence, label %s is acquired more than once for camera %s.", label, camera)
                        end
                        if label == ""
                            error("Invalid sequence, empty label for acquire command for camera %s.", camera)
                        end
                        started = false;
                        acquired(end + 1) = label; %#ok<AGROW>
                    end
                    if type == "Analysis"
                        if ~any(acquired == label)
                            error("Invalid sequence, missing acquire command for analysis on %s for camera %s.", label, camera)
                        end
                        if any(analyzed == label)
                            error("Invalid sequence, label %s is analyzed more than once for camera %s", label, camera)
                        end
                        note = camera_seq.Note(i);
                        AnalysisRegistry.parseAnalysisNote(note);
                        analyzed(end + 1) = label; %#ok<AGROW>
                    end
                end
                if started
                    error("Invalid sequence, missing acquire command for camera %s.", camera)
                end
            end
        end

        % Parse the acquisition note to pass to the Camera
        function args = parseNoteParams(note)
            arguments
                note (1, 1) string
            end
            params = split(note, ", ")';
            for p = params
                if contains(p, "=")
                    [key, value] = split(p, "=");
                    args.(key) = str2double(value);
                else
                    args.(p) = true;
                end
            end
            args = namedargs2cell(args);
        end
    end

end
